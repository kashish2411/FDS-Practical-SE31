
#BUCKETSORT
def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)] 
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
             
    return result
 
 
arr = [12,8,32,128]
output = bucketSort(arr)
print(output)


#SHELLSORT
n=int(input("enter number of students"))
s=[]
for i in range(n):
    r=float(input(f"enter percentage of \t"))
    s.append(r)



def shellsort(arr,n):
    gap=n//2
    while gap>0:
        for i in range(gap,n):
            temp=arr[i]
            j=i
            while(j>=gap and arr[j-gap]>temp):
                arr[j]=arr[j-gap]
                j=j-gap
            arr[j]=temp
        gap=gap//2
print(s)
shellsort(s,len(s))
print(s)
n=int(input("enter number of students"))
s=[]
for i in range(n):
    r=float(input(f"enter percentage of \t"))
    s.append(r)


#MERGESORT
def merge(arr):
    if len(arr)>1:
        mid=len(arr)//2
        left=arr[:mid]
        right=arr[mid:]
        merge(left)
        merge(right)
        i=j=k=0
        while (i<len(left) and j<len(right)):
            if (left[i]<right[j]):
                arr[k] =left[i]
                i=i+1
            else:
                arr[k]=right[j]
                j=j+1
            k=k+1
        while i <len(left):
            arr[k] =left[i]
            i=i+1
            k=k+1
  
        while j <len(right):
            arr[k]=right[j]
            j=j+1
            k=k+1
merge(s)
print(s)
n=int(input("enter number of students"))
s=[]
for i in range(n):
    r=float(input(f"enter percentage of \t"))
    s.append(r)
def selectionsort(arr):
    for i in range(len(arr)):
        min=i
        for j in range(i+1,len(arr)):
            if(arr[j]<arr[min]):
                min=j
        temp=arr[i]
        arr[i]=arr[min]
        arr[min]=temp
        
    return arr
k=selectionsort(s)
print(k)

  #insertionsort
def insertionsort(arr,n):
    for i in range(1,n):
        temp=arr[i]
        j=i-1
        while(j>=0 and arr[j]>temp ):
            arr[j+1]=arr[j]
            j=j-1
            arr[j+1]=temp
    return arr
def divide(arr,low,high):
    pivot=arr[low]
    i=low+1
    j=high
    flag=True
    while flag==True:
        while(i<=j and arr[i]<=pivot):
            i=i+1
        while(i<=j and arr[j]>=pivot):
            j-=1
        if(j<i):
            flag=False
        else:
            temp=arr[i]
            arr[i]=arr[j]
            arr[j]=temp
    temp=arr[low]
    arr[low]=arr[j]
    arr[j]=temp
    return j
def quicksort(arr,low,high):
    if(low<high):
        d=divide(arr,low,high)
        quicksort(arr,low,d-1)
        quicksort(arr,d+1,high)
    n=int(input("enter number of students"))
s=[]
for i in range(n):
    r=float(input(f"enter percentage of \t"))
    s.append(r)

#bubble sort
def bub(arr):
    for i in range(0,n-1):
        for j in range(0,n-i-1):
            if(arr[j]>arr[j+1]):
                temp=arr[j]
                arr[j]=arr[j+1]
                arr[j+1]=temp
    return arr
#mergesort
def merge(arr):
    if len(arr)>1:
        mid=len(arr)//2
        left=arr[-mid:]
        right=arr[mid:]
        merge(left)
        merge(right)
        i=j=k=0
        while (i<len(left) and j<len(right)):
            if (left[i]<right[j]):
                arr[k] =left[i]
                i=i+1
            else:
                arr[k]=right[j]
                j=j+1
            k=k+1
        while i <len(left):
            arr[k] =left[i]
            i=i+1
            k=k+1
  
        while j <len(right):
            arr[k]=right[j]
            j=j+1
            k=k+1
      

  
   
        
     

print("Original Array:")
print(s)
print("sorted array by bubble sorting:")
a=bub(s)
print(a)
b=5
print("the highest scores are")
print(a[-5:])
merge(s)
print(s)
